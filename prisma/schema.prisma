// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Quiz          Quiz[]
  role          String    @default("user")

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id        Int        @id @default(autoincrement())
  name      String
  code      String?    @unique
  ownerId   String?
  questions Question[]
  owner     User?      @relation(fields: [ownerId], references: [id], onDelete: SetNull)
}

model Question {
  id       Int      @id @default(autoincrement())
  question String
  answers  Answer[]
  quiz     Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId   Int
}

model Answer {
  id         Int      @id @default(autoincrement())
  answer     String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
}
